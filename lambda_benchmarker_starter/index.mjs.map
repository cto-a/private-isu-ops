{
  "version": 3,
  "sources": ["src/index.ts"],
  "sourcesContent": ["import { SQS, SendMessageCommand } from '@aws-sdk/client-sqs';\nimport https from 'https';\nimport { setTimeout } from 'timers/promises';\n\n\nconst sqs = new SQS({region: 'ap-northeast-1'});\n\nexport const handler = async (event) => {\n  console.log(event);\n  const sheetsApiUrl = process.env.GOOGLE_SHEETS_API;\n  console.log(\"url: \"+sheetsApiUrl);\n  // https.get(sheetsApiUrl, function(res) {\n  //       console.log(\"Got response: \" + res.statusCode);\n  //       console.log(res);\n  //       console.log(res.data);\n\n  //   }).on('error', function(e) {\n  //       console.log(e.statusCode);\n  //       //context.done('error', e);\n  //   });\n  const req = https.request(sheetsApiUrl, (res) => {\n    console.log(`BODY: ${res}`);\n    res.on('data', (chunk) => {\n        console.log(`BODY: ${chunk}`);\n    });\n    res.on('end', () => {\n        console.log('No more data in response.');\n    });\n  });\n  await setTimeout(4000);\n  console.log(req);\n  const sourceIp = event.requestContext.http.sourceIp;\n  const rawQueryString = event.rawQueryString;\n  const val = event.queryStringParameters.val;\n  const params = {\n    // DelaySeconds: 10,\n    MessageAttributes: {\n      sourceIp: {\n        DataType: \"String\",\n        StringValue: sourceIp,\n      },\n      rawQueryString: {\n        DataType: \"String\",\n        StringValue: rawQueryString,\n      },\n      val: {\n        DataType: \"String\",\n        StringValue: val,\n      },\n    },\n    MessageBody:\n      \"TEST\u3067\u3059\u3002\",\n    QueueUrl: \"https://sqs.ap-northeast-1.amazonaws.com/254374927794/benchmark_queue\" \n\n  };\n  const command = new SendMessageCommand(params);\n    let response = {\n        statusCode: 200,\n        body: JSON.stringify('Hello from Lambda!'),\n    };\n\n   try {\n      await sqs.send(command);\n      console.log(\"Success\");\n    } catch (e) {\n      console.log(\"Error\", e);\n      response = {\n        statusCode: 200,\n        body: JSON.stringify('Error'),\n    };\n    }\n\n    return response;\n};"],
  "mappings": "AAAA,OAAS,OAAAA,EAAK,sBAAAC,MAA0B,sBACxC,OAAOC,MAAW,QAClB,OAAS,cAAAC,MAAkB,kBAG3B,IAAMC,EAAM,IAAIJ,EAAI,CAAC,OAAQ,gBAAgB,CAAC,EAEjCK,EAAU,MAAOC,GAAU,CACtC,QAAQ,IAAIA,CAAK,EACjB,IAAMC,EAAe,QAAQ,IAAI,kBACjC,QAAQ,IAAI,QAAQA,CAAY,EAUhC,IAAMC,EAAMN,EAAM,QAAQK,EAAeE,GAAQ,CAC/C,QAAQ,IAAI,SAASA,GAAK,EAC1BA,EAAI,GAAG,OAASC,GAAU,CACtB,QAAQ,IAAI,SAASA,GAAO,CAChC,CAAC,EACDD,EAAI,GAAG,MAAO,IAAM,CAChB,QAAQ,IAAI,2BAA2B,CAC3C,CAAC,CACH,CAAC,EACD,MAAMN,EAAW,GAAI,EACrB,QAAQ,IAAIK,CAAG,EACf,IAAMG,EAAWL,EAAM,eAAe,KAAK,SACrCM,EAAiBN,EAAM,eACvBO,EAAMP,EAAM,sBAAsB,IAClCQ,EAAS,CAEb,kBAAmB,CACjB,SAAU,CACR,SAAU,SACV,YAAaH,CACf,EACA,eAAgB,CACd,SAAU,SACV,YAAaC,CACf,EACA,IAAK,CACH,SAAU,SACV,YAAaC,CACf,CACF,EACA,YACE,yBACF,SAAU,uEAEZ,EACME,EAAU,IAAId,EAAmBa,CAAM,EACvCE,EAAW,CACX,WAAY,IACZ,KAAM,KAAK,UAAU,oBAAoB,CAC7C,EAED,GAAI,CACD,MAAMZ,EAAI,KAAKW,CAAO,EACtB,QAAQ,IAAI,SAAS,CACvB,OAASE,EAAP,CACA,QAAQ,IAAI,QAASA,CAAC,EACtBD,EAAW,CACT,WAAY,IACZ,KAAM,KAAK,UAAU,OAAO,CAChC,CACA,CAEA,OAAOA,CACX",
  "names": ["SQS", "SendMessageCommand", "https", "setTimeout", "sqs", "handler", "event", "sheetsApiUrl", "req", "res", "chunk", "sourceIp", "rawQueryString", "val", "params", "command", "response", "e"]
}
